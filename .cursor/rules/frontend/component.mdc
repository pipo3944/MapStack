---
description: React Component Design Principles and Implementation Guidelines in MapStack
globs: 
alwaysApply: false
---
---
title: Reactコンポーネント設計規約
description: MapStackにおけるReactコンポーネントの設計原則と実装規約
category: frontend
importance: high
last_updated: 2025-04-13
---

# Reactコンポーネント設計規約

## 1. 基本原則

### 1.1 コンポーネントの責務
- 単一責任の原則（SRP）に従う
- 1コンポーネントは300行を超えない
- 1つのコンポーネントは1つのことだけを行う
- 複雑なロジックはカスタムフックに分離する

### 1.2 ファイル構成
```tsx
// 基本的なコンポーネントの構成
import { type FC } from 'react'
import { useCallback } from 'react'

// 型定義は先頭で行う
interface Props {
  title: string
  description?: string
  onAction: (id: string) => void
}

export const ExampleComponent: FC<Props> = ({
  title,
  description = '', // デフォルト値の設定
  onAction,
}) => {
  // イベントハンドラはuseCallbackで最適化
  const handleClick = useCallback(() => {
    onAction('example')
  }, [onAction])

  return (
    <div>
      <h2>{title}</h2>
      {description && <p>{description}</p>}
      <button onClick={handleClick}>アクション</button>
    </div>
  )
}
```

## 2. コンポーネントの分類

### 2.1 Presentationalコンポーネント
- UIの表示のみを担当
- 状態管理を持たない
- propsを通じてデータと振る舞いを受け取る
- `components/ui/`ディレクトリに配置

### 2.2 Containerコンポーネント
- ビジネスロジックと状態管理を担当
- データフェッチングやイベントハンドリングを行う
- Presentationalコンポーネントを組み合わせる
- `components/containers/`ディレクトリに配置

### 2.3 Pageコンポーネント
- ルーティングのエンドポイントとなるコンポーネント
- レイアウトの組み立てを担当
- SEO関連の設定を行う
- `app/`ディレクトリに配置

## 3. Props設計

### 3.1 型定義
```tsx
// 共通の型定義
type BaseProps = {
  className?: string
  testId?: string
}

// コンポーネント固有のProps
interface CardProps extends BaseProps {
  title: string
  description: string
  imageUrl?: string
  onClick?: () => void
}
```

### 3.2 必須規約
- すべてのpropsに型定義を付ける
- オプショナルなpropsにはデフォルト値を設定
- propsの型はexportして再利用可能にする
- callback関数の命名は`on`プレフィックスを使用

## 4. パフォーマンス最適化

### 4.1 メモ化
```tsx
// コンポーネントのメモ化
import { memo } from 'react'

export const HeavyComponent = memo(({ data }: Props) => {
  return (
    // 重い処理を含むレンダリング
  )
})

// useCallbackの使用
const handleChange = useCallback((value: string) => {
  // イベントハンドリング
}, [/* 依存配列 */])
```

### 4.2 レンダリング最適化
- 不要なre-renderを防ぐ
- 大きなリストには仮想化を使用
- 重いコンポーネントはLazy Loadingを検討

## 5. エラーハンドリング

### 5.1 エラー境界
```tsx
import { ErrorBoundary } from '@/components/common/ErrorBoundary'

export const SafeComponent = () => {
  return (
    <ErrorBoundary fallback={<ErrorFallback />}>
      <ComponentThatMightError />
    </ErrorBoundary>
  )
}
```

### 5.2 Loading状態
```tsx
export const AsyncComponent = () => {
  const { data, isLoading, error } = useAsyncData()

  if (isLoading) return <LoadingSpinner />
  if (error) return <ErrorMessage error={error} />

  return <DataDisplay data={data} />
}
```

## 6. アクセシビリティ

### 6.1 必須要件
- 適切なHTML要素の使用
- ARIA属性の適切な設定
- キーボード操作のサポート
- 色のコントラスト比の確保

### 6.2 実装例
```tsx
export const AccessibleButton: FC<ButtonProps> = ({
  label,
  onClick,
  disabled,
  ariaLabel,
}) => {
  return (
    <button
      onClick={onClick}
      disabled={disabled}
      aria-label={ariaLabel || label}
      role="button"
      tabIndex={0}
    >
      {label}
    </button>
  )
}
```

## 7. テスト容易性

- コンポーネントは小さく保ち、テスト可能な設計にする
- データ取得ロジックはカスタムフックに分離
- テスト用のdata-testid属性を付与
- スナップショットテストよりも機能テストを重視
