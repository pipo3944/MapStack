---
description: Database Query Design Principles and Implementation Guidelines in MapStack
globs: 
alwaysApply: false
---
---
title: データベースクエリ設計規約
description: MapStackにおけるデータベースクエリの設計原則と実装規約
category: database
importance: high
last_updated: 2025-04-13
---

# データベースクエリ設計規約

## 1. 基本原則

### 1.1 クエリ作成の一般原則
- 明示的なカラム指定（`SELECT *`の回避）
- 適切なWHERE句の使用
- JOINの最適化
- トランザクションの適切な範囲設定
- SQLインジェクションの防止

### 1.2 SQLAlchemyの使用
- モデル定義に基づくクエリ構築
- Coreよりもモデル（ORM）ベースのクエリを優先
- 高度なケースのみRaw SQLを使用

```python
# 良い例（ORMクエリ）
def get_active_users(db: Session, skip: int = 0, limit: int = 100):
    return db.query(User).filter(User.is_active == True).offset(skip).limit(limit).all()

# 必要な場合のみRaw SQL
def get_user_statistics(db: Session):
    result = db.execute(text("""
        SELECT 
            DATE_TRUNC('month', created_at) as month,
            COUNT(*) as user_count
        FROM users
        WHERE created_at > NOW() - INTERVAL '1 year'
        GROUP BY month
        ORDER BY month
    """))
    return result.fetchall()
```

## 2. データ検索

### 2.1 基本的な検索クエリ
```python
# 単一レコードの検索
def get_user_by_id(db: Session, user_id: str) -> Optional[User]:
    return db.query(User).filter(User.id == user_id).first()

# 複数条件での検索
def get_users_by_criteria(
    db: Session,
    is_active: Optional[bool] = None,
    role: Optional[str] = None,
    search_term: Optional[str] = None
) -> List[User]:
    query = db.query(User)
    
    # 条件の追加
    if is_active is not None:
        query = query.filter(User.is_active == is_active)
    
    if role:
        query = query.filter(User.role == role)
    
    if search_term:
        query = query.filter(
            or_(
                User.name.ilike(f"%{search_term}%"),
                User.email.ilike(f"%{search_term}%")
            )
        )
    
    return query.all()
```

### 2.2 高度な検索
```python
# 関連データを含む検索
def get_user_with_activities(db: Session, user_id: str) -> Optional[User]:
    return db.query(User).\
        options(
            joinedload(User.activities)
        ).\
        filter(User.id == user_id).\
        first()

# 集計クエリ
def get_activity_stats_by_user(db: Session) -> List[Dict]:
    result = db.query(
        User.id,
        User.name,
        func.count(Activity.id).label("activity_count"),
        func.sum(Activity.duration).label("total_duration")
    ).\
    join(Activity, User.id == Activity.user_id).\
    group_by(User.id, User.name).\
    order_by(desc("activity_count")).\
    all()
    
    return [
        {
            "user_id": row.id,
            "name": row.name,
            "activity_count": row.activity_count,
            "total_duration": row.total_duration
        }
        for row in result
    ]
```

## 3. データ操作

### 3.1 新規データの作成
```python
def create_user(db: Session, user_data: UserCreate) -> User:
    # パスワードのハッシュ化
    hashed_password = get_password_hash(user_data.password)
    
    # モデルインスタンスの作成
    db_user = User(
        email=user_data.email,
        name=user_data.name,
        hashed_password=hashed_password
    )
    
    # セッションに追加
    db.add(db_user)
    db.commit()  # コミット
    db.refresh(db_user)  # 最新データの取得
    
    return db_user
```

### 3.2 データ更新
```python
def update_user(db: Session, user_id: str, user_data: UserUpdate) -> Optional[User]:
    # ユーザーの取得
    db_user = db.query(User).filter(User.id == user_id).first()
    if not db_user:
        return None
    
    # 更新可能なフィールドのみを抽出
    update_data = user_data.dict(exclude_unset=True)
    
    # パスワード更新の特別処理
    if "password" in update_data:
        update_data["hashed_password"] = get_password_hash(update_data["password"])
        del update_data["password"]
    
    # モデルの更新（辞書展開方式）
    for key, value in update_data.items():
        setattr(db_user, key, value)
    
    # コミット
    db.commit()
    db.refresh(db_user)
    
    return db_user
```

### 3.3 データ削除
```python
# 物理削除
def delete_team(db: Session, team_id: str) -> bool:
    db_team = db.query(Team).filter(Team.id == team_id).first()
    if not db_team:
        return False
    
    db.delete(db_team)
    db.commit()
    
    return True

# 論理削除（ソフトデリート）
def soft_delete_user(db: Session, user_id: str) -> bool:
    db_user = db.query(User).filter(User.id == user_id).first()
    if not db_user:
        return False
    
    # 削除日時を設定
    db_user.deleted_at = datetime.now(timezone.utc)
    db_user.is_active = False
    
    db.commit()
    
    return True
```

## 4. トランザクション管理

### 4.1 明示的なトランザクション
```python
def transfer_points(
    db: Session, 
    from_user_id: str, 
    to_user_id: str,
    points: int
) -> bool:
    # トランザクション開始
    try:
        # 送信元ユーザーからポイント減算
        from_user = db.query(User).filter(User.id == from_user_id).with_for_update().first()
        if not from_user or from_user.points < points:
            return False
        
        from_user.points -= points
        
        # 送信先ユーザーにポイント加算
        to_user = db.query(User).filter(User.id == to_user_id).with_for_update().first()
        if not to_user:
            return False
        
        to_user.points += points
        
        # トランザクションログの記録
        point_transfer = PointTransfer(
            from_user_id=from_user_id,
            to_user_id=to_user_id,
            points=points,
            description="ポイント送金"
        )
        db.add(point_transfer)
        
        # コミット
        db.commit()
        return True
    except Exception as e:
        # エラー発生時はロールバック
        db.rollback()
        logger.error(f"ポイント送金エラー: {str(e)}")
        return False
```

### 4.2 セーブポイント
```python
def process_order(db: Session, order_data: OrderCreate) -> Optional[Order]:
    # 外部トランザクション開始
    try:
        # 注文の作成
        order = Order(
            user_id=order_data.user_id,
            total_amount=order_data.total_amount,
            status="pending"
        )
        db.add(order)
        db.flush()  # IDを取得するためにフラッシュ
        
        # セーブポイント作成
        savepoint = db.begin_nested()
        
        try:
            # 注文アイテムの作成
            for item_data in order_data.items:
                order_item = OrderItem(
                    order_id=order.id,
                    product_id=item_data.product_id,
                    quantity=item_data.quantity,
                    price=item_data.price
                )
                db.add(order_item)
            
            # セーブポイントのコミット
            savepoint.commit()
        except Exception as e:
            # セーブポイントのロールバック
            savepoint.rollback()
            logger.error(f"注文アイテム作成エラー: {str(e)}")
            raise
        
        # 在庫の更新
        for item_data in order_data.items:
            product = db.query(Product).filter(Product.id == item_data.product_id).with_for_update().first()
            if not product or product.stock < item_data.quantity:
                db.rollback()
                return None
            
            product.stock -= item_data.quantity
        
        # 注文ステータスの更新
        order.status = "confirmed"
        
        # トランザクションのコミット
        db.commit()
        return order
    except Exception as e:
        db.rollback()
        logger.error(f"注文処理エラー: {str(e)}")
        return None
```

## 5. パフォーマンス最適化

### 5.1 N+1問題の回避
```python
# 悪い例（N+1問題）
def get_teams_with_members_bad(db: Session) -> List[Team]:
    teams = db.query(Team).all()
    
    # 各チームのメンバーを個別に取得（N+1クエリ）
    for team in teams:
        team.members = db.query(TeamMember).filter(TeamMember.team_id == team.id).all()
    
    return teams

# 良い例（Eager Loading）
def get_teams_with_members_good(db: Session) -> List[Team]:
    # JOINを使用して一度にロード
    return db.query(Team).\
        options(joinedload(Team.members)).\
        all()
```

### 5.2 クエリの最適化
```python
# インデックスを考慮したクエリ
def search_users_optimized(
    db: Session,
    search_term: Optional[str] = None,
    sort_by: str = "created_at",
    sort_order: str = "desc",
    page: int = 1,
    page_size: int = 20
) -> List[User]:
    # 基本クエリ
    query = db.query(User)
    
    # 検索条件
    if search_term:
        query = query.filter(
            or_(
                User.name.ilike(f"%{search_term}%"),
                User.email.ilike(f"%{search_term}%")
            )
        )
    
    # ソート順の適用（インデックスが効くようにする）
    if sort_order.lower() == "asc":
        query = query.order_by(getattr(User, sort_by).asc())
    else:
        query = query.order_by(getattr(User, sort_by).desc())
    
    # ページネーション（オフセットよりも範囲検索が効率的）
    offset = (page - 1) * page_size
    
    return query.offset(offset).limit(page_size).all()
```

### 5.3 一括操作
```python
# 一括更新
def activate_users_by_ids(db: Session, user_ids: List[str]) -> int:
    """指定されたIDのユーザーを一括アクティブ化する"""
    # SQLAlchemyのCoreを使用した一括更新
    result = db.execute(
        update(User).\
        where(User.id.in_(user_ids)).\
        values(is_active=True)
    )
    
    db.commit()
    
    # 更新された行数を返す
    return result.rowcount

# 一括挿入
def bulk_create_activities(db: Session, activities_data: List[ActivityCreate]) -> List[Activity]:
    """アクティビティを一括作成する"""
    # モデルインスタンスのリスト作成
    db_activities = [
        Activity(
            user_id=data.user_id,
            type=data.type,
            data=data.data,
            duration=data.duration
        )
        for data in activities_data
    ]
    
    # 一括挿入
    db.add_all(db_activities)
    db.commit()
    
    return db_activities
```

## 6. セキュリティ対策

### 6.1 SQLインジェクション対策
```python
# 悪い例（危険なクエリ）
def search_users_unsafe(db: Session, search_term: str) -> List[User]:
    # SQLインジェクションに脆弱なクエリ
    query = f"SELECT * FROM users WHERE name LIKE '%{search_term}%' OR email LIKE '%{search_term}%'"
    return db.execute(text(query)).fetchall()

# 良い例（パラメータバインディング）
def search_users_safe(db: Session, search_term: str) -> List[User]:
    # パラメータバインディングを使用
    query = text("SELECT * FROM users WHERE name LIKE :search OR email LIKE :search")
    search_param = f"%{search_term}%"
    return db.execute(query, {"search": search_param}).fetchall()

# さらに良い例（ORM使用）
def search_users_best(db: Session, search_term: str) -> List[User]:
    # ORMを使用（自動的にSQLインジェクション対策される）
    search_param = f"%{search_term}%"
    return db.query(User).\
        filter(
            or_(
                User.name.ilike(search_param),
                User.email.ilike(search_param)
            )
        ).\
        all()
```

### 6.2 権限チェック
```python
def get_user_if_allowed(db: Session, user_id: str, current_user: User) -> Optional[User]:
    """ユーザー情報を取得（権限チェック付き）"""
    # 対象ユーザーを取得
    db_user = db.query(User).filter(User.id == user_id).first()
    
    if not db_user:
        return None
    
    # 権限チェック: 管理者または自分自身のデータのみアクセス可能
    if current_user.is_admin or current_user.id == user_id:
        return db_user
    
    # 権限がない場合
    return None
```

## 7. デバッグとログ記録

### 7.1 クエリログ
```python
# SQLAlchemyのクエリログ設定
logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)  # INFO: SQL文のみ
# logging.getLogger('sqlalchemy.engine').setLevel(logging.DEBUG)  # DEBUG: パラメータも含む

# 特定の長時間クエリのログ記録
def execute_with_timing(db: Session, query):
    """クエリの実行時間を計測してログ記録する"""
    start_time = time.time()
    result = db.execute(query)
    end_time = time.time()
    
    execution_time = end_time - start_time
    
    # 長時間クエリの場合は警告ログ
    if execution_time > 1.0:  # 1秒以上かかるクエリ
        logger.warning(f"長時間クエリ: {execution_time:.4f}秒, SQL: {query}")
    
    return result
```

### 7.2 統計情報の収集
```python
class QueryStats:
    """クエリ統計情報を収集するミドルウェア"""
    
    def __init__(self):
        self.query_count = 0
        self.slow_queries = []
    
    def before_cursor_execute(self, conn, cursor, statement, parameters, context, executemany):
        conn.info.setdefault('query_start_time', []).append(time.time())
    
    def after_cursor_execute(self, conn, cursor, statement, parameters, context, executemany):
        start_time = conn.info['query_start_time'].pop()
        execution_time = time.time() - start_time
        
        self.query_count += 1
        
        if execution_time > 0.5:  # 500ms以上のクエリを記録
            self.slow_queries.append({
                'time': execution_time,
                'sql': statement,
                'params': parameters
            })

# SQLAlchemyイベントリスナーの登録
query_stats = QueryStats()
event.listen(Engine, 'before_cursor_execute', query_stats.before_cursor_execute)
event.listen(Engine, 'after_cursor_execute', query_stats.after_cursor_execute)
``` 