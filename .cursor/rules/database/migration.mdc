---
description: Database Migration Management and Execution in MapStack
globs: 
alwaysApply: false
---
---
title: データベースマイグレーション戦略
description: MapStackにおけるデータベースマイグレーションの管理と実行方法
category: database
importance: high
last_updated: 2025-04-13
---

# データベースマイグレーション戦略

## 1. マイグレーション管理の原則

### 1.1 基本的な考え方
- マイグレーションは「コードとしてのデータベース」の考え方に基づく
- すべてのスキーマ変更はマイグレーションファイルとして管理
- 手動でのデータベース変更は厳禁
- マイグレーションはバージョン管理システムで追跡

### 1.2 マイグレーションツール
MapStackでは**Alembic**をマイグレーション管理ツールとして使用します：
- SQLAlchemyと完全互換
- 自動マイグレーション生成機能
- 前方/後方互換性のあるマイグレーション
- 柔軟なマイグレーションスクリプト

## 2. マイグレーションファイルの構造

### 2.1 ディレクトリ構成
```
backend/
└── alembic/
    ├── versions/                     # マイグレーションファイル
    │   ├── 1a2b3c4d5e6f_create_users_table.py
    │   ├── 2c3d4e5f6g7h_add_user_fields.py
    │   └── ...
    ├── env.py                        # Alembic環境設定
    ├── script.py.mako               # マイグレーションテンプレート
    └── alembic.ini                   # Alembic設定ファイル
```

### 2.2 マイグレーションファイル命名規則
- 自動生成されるリビジョンID（例：`1a2b3c4d5e6f`）
- 変更内容を簡潔に表す説明（例：`create_users_table`）
- スネークケースを使用

### 2.3 マイグレーションファイル内容
各マイグレーションファイルには必ず以下の要素を含める：
- `upgrade()` メソッド：前方マイグレーション（適用）
- `downgrade()` メソッド：後方マイグレーション（ロールバック）
- マイグレーションの説明コメント

```python
"""create users table

Revision ID: 1a2b3c4d5e6f
Revises: 
Create Date: 2023-01-01 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID

# revision identifiers
revision = '1a2b3c4d5e6f'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    """ユーザーテーブルを作成"""
    op.create_table(
        'users',
        sa.Column('id', UUID(as_uuid=True), primary_key=True, server_default=sa.text('gen_random_uuid()')),
        sa.Column('email', sa.String(255), nullable=False, unique=True),
        sa.Column('hashed_password', sa.String(255), nullable=False),
        sa.Column('full_name', sa.String(100), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=False, server_default='true'),
        sa.Column('is_admin', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False)
    )
    op.create_index('idx_users_email', 'users', ['email'], unique=True)

def downgrade():
    """ユーザーテーブルを削除"""
    op.drop_index('idx_users_email', table_name='users')
    op.drop_table('users')
```

## 3. マイグレーション作成ワークフロー

### 3.1 新規マイグレーションの作成
1. モデル定義を更新（`app/db/models/`内のファイル）
2. マイグレーションを自動生成：
   ```bash
   alembic revision --autogenerate -m "説明文"
   ```
3. 生成されたマイグレーションファイルを確認・修正
4. `downgrade()` メソッドが正しく実装されていることを検証

### 3.2 手動マイグレーションの作成
複雑なスキーマ変更や、データ変換が必要な場合：

```bash
alembic revision -m "説明文"
```

手動でマイグレーション内容を実装：

```python
def upgrade():
    # スキーマ変更
    op.add_column('users', sa.Column('phone', sa.String(20)))
    
    # データ変換
    op.execute("""
        UPDATE users
        SET phone = '0000000000'
        WHERE phone IS NULL
    """)

def downgrade():
    op.drop_column('users', 'phone')
```

## 4. マイグレーション実行手順

### 4.1 マイグレーションの適用
```bash
# 最新状態にアップグレード
alembic upgrade head

# 特定のリビジョンにアップグレード
alembic upgrade 1a2b3c4d5e6f

# 相対的なアップグレード（例：3つ進める）
alembic upgrade +3
```

### 4.2 マイグレーションのロールバック
```bash
# 1つ前のリビジョンに戻す
alembic downgrade -1

# 特定のリビジョンに戻す
alembic downgrade 1a2b3c4d5e6f

# 最初の状態に戻す
alembic downgrade base
```

### 4.3 マイグレーション状態の確認
```bash
# 現在の状態を確認
alembic current

# マイグレーション履歴の確認
alembic history --verbose
```

## 5. 環境ごとのマイグレーション戦略

### 5.1 開発環境
- 開発者は自由にマイグレーションを作成・適用
- `alembic upgrade head` を頻繁に実行
- 必要に応じてロールバックとやり直し

### 5.2 テスト環境
- CIパイプラインで自動的にマイグレーション適用
- テスト毎に新しいDBでマイグレーションを検証
- マイグレーションのテストも含める

### 5.3 本番環境
- デプロイプロセスの一環としてマイグレーション実行
- マイグレーション前にバックアップを取得
- 大規模なスキーマ変更はメンテナンスウィンドウで実施
- ダウンタイムが発生しない安全なマイグレーション手法の使用

## 6. 注意すべきマイグレーション

### 6.1 破壊的変更の回避
以下の変更は注意が必要：
- カラムの削除
- テーブルの削除
- カラム名の変更
- カラム型の変更（特に情報が失われる可能性がある場合）

### 6.2 安全なマイグレーション手法
破壊的変更が必要な場合は、複数のマイグレーションに分割します：

**例：カラム名変更の場合**
1. 新しいカラムを追加
2. データを新しいカラムにコピー
3. アプリケーションコードを新しいカラムを使用するように更新
4. 古いカラムを非推奨としてマーク（コメントや文書化）
5. 後のマイグレーションで古いカラムを削除

### 6.3 大量データのマイグレーション
- バッチ処理を使用して少量ずつ処理
- 長時間実行されるマイグレーションはオフラインツールで実行
- 非同期プロセスとしてデータ移行を実装

## 7. トラブルシューティング

### 7.1 一般的な問題と解決策

| 問題 | 解決策 |
|------|-------|
| マイグレーションの競合 | `alembic merge` コマンドで解決 |
| 適用済みマイグレーションの変更 | 新しいマイグレーションを作成し、修正を適用 |
| マイグレーション実行中のエラー | トランザクションを使用してアトミック性を確保 |
| 不整合なマイグレーション履歴 | `alembic stamp` で状態を修正 |

### 7.2 マイグレーション履歴の修正
環境間でマイグレーション状態が異なる場合：
```bash
# 特定のリビジョンをマークする（実際に適用せず）
alembic stamp 1a2b3c4d5e6f

# 最新状態をマークする
alembic stamp head
```

## 8. ベストプラクティス

1. **テスト**: すべてのマイグレーションはテスト環境で検証
2. **アトミック性**: 各マイグレーションは完全に成功するか、完全に失敗するかのどちらか
3. **独立性**: マイグレーションはできるだけ他のマイグレーションに依存しないように設計
4. **可逆性**: すべてのマイグレーションには適切な `downgrade()` を実装
5. **ドキュメンテーション**: 複雑なマイグレーションには詳細なコメントを追加
6. **継続的インテグレーション**: CIパイプラインでマイグレーションを自動検証
7. **バックアップ**: 本番環境でのマイグレーション前には必ずバックアップを取得
