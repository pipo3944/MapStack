/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * MapStack API
 * AI学習プラットフォーム MapStack のバックエンドAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  HTTPValidationError,
  NodeDocumentLinkCreate,
  NodeDocumentLinkResponse,
  NodeDocumentsResponse
} from '../../model';

import { customInstance } from '../../mutator/custom-instance';




/**
 * 指定されたノードに関連するドキュメント一覧を取得する
 * @summary Get Node Documents
 */
export const getNodeDocumentsApiV1NodesNodeIdDocumentsGet = (
    nodeId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<NodeDocumentsResponse>(
      {url: `/api/v1/nodes/${nodeId}/documents`, method: 'GET', signal
    },
      );
    }
  

export const getGetNodeDocumentsApiV1NodesNodeIdDocumentsGetQueryKey = (nodeId: string,) => {
    return [`/api/v1/nodes/${nodeId}/documents`] as const;
    }

    
export const getGetNodeDocumentsApiV1NodesNodeIdDocumentsGetQueryOptions = <TData = Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError = HTTPValidationError>(nodeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNodeDocumentsApiV1NodesNodeIdDocumentsGetQueryKey(nodeId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>> = ({ signal }) => getNodeDocumentsApiV1NodesNodeIdDocumentsGet(nodeId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(nodeId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNodeDocumentsApiV1NodesNodeIdDocumentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>>
export type GetNodeDocumentsApiV1NodesNodeIdDocumentsGetQueryError = HTTPValidationError


export function useGetNodeDocumentsApiV1NodesNodeIdDocumentsGet<TData = Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError = HTTPValidationError>(
 nodeId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>,
          TError,
          Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNodeDocumentsApiV1NodesNodeIdDocumentsGet<TData = Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError = HTTPValidationError>(
 nodeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>,
          TError,
          Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNodeDocumentsApiV1NodesNodeIdDocumentsGet<TData = Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError = HTTPValidationError>(
 nodeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Node Documents
 */

export function useGetNodeDocumentsApiV1NodesNodeIdDocumentsGet<TData = Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError = HTTPValidationError>(
 nodeId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNodeDocumentsApiV1NodesNodeIdDocumentsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNodeDocumentsApiV1NodesNodeIdDocumentsGetQueryOptions(nodeId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ノードとドキュメントを関連付ける
 * @summary Link Node Document
 */
export const linkNodeDocumentApiV1NodesNodeIdDocumentsPost = (
    nodeId: string,
    nodeDocumentLinkCreate: NodeDocumentLinkCreate,
 signal?: AbortSignal
) => {
      
      
      return customInstance<NodeDocumentLinkResponse>(
      {url: `/api/v1/nodes/${nodeId}/documents`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: nodeDocumentLinkCreate, signal
    },
      );
    }
  


export const getLinkNodeDocumentApiV1NodesNodeIdDocumentsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof linkNodeDocumentApiV1NodesNodeIdDocumentsPost>>, TError,{nodeId: string;data: NodeDocumentLinkCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof linkNodeDocumentApiV1NodesNodeIdDocumentsPost>>, TError,{nodeId: string;data: NodeDocumentLinkCreate}, TContext> => {
    
const mutationKey = ['linkNodeDocumentApiV1NodesNodeIdDocumentsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof linkNodeDocumentApiV1NodesNodeIdDocumentsPost>>, {nodeId: string;data: NodeDocumentLinkCreate}> = (props) => {
          const {nodeId,data} = props ?? {};

          return  linkNodeDocumentApiV1NodesNodeIdDocumentsPost(nodeId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LinkNodeDocumentApiV1NodesNodeIdDocumentsPostMutationResult = NonNullable<Awaited<ReturnType<typeof linkNodeDocumentApiV1NodesNodeIdDocumentsPost>>>
    export type LinkNodeDocumentApiV1NodesNodeIdDocumentsPostMutationBody = NodeDocumentLinkCreate
    export type LinkNodeDocumentApiV1NodesNodeIdDocumentsPostMutationError = HTTPValidationError

    /**
 * @summary Link Node Document
 */
export const useLinkNodeDocumentApiV1NodesNodeIdDocumentsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof linkNodeDocumentApiV1NodesNodeIdDocumentsPost>>, TError,{nodeId: string;data: NodeDocumentLinkCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof linkNodeDocumentApiV1NodesNodeIdDocumentsPost>>,
        TError,
        {nodeId: string;data: NodeDocumentLinkCreate},
        TContext
      > => {

      const mutationOptions = getLinkNodeDocumentApiV1NodesNodeIdDocumentsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ノードとドキュメントの関連付けを解除する
 * @summary Unlink Node Document
 */
export const unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete = (
    nodeId: string,
    documentId: string,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/v1/nodes/${nodeId}/documents/${documentId}`, method: 'DELETE'
    },
      );
    }
  


export const getUnlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete>>, TError,{nodeId: string;documentId: string}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete>>, TError,{nodeId: string;documentId: string}, TContext> => {
    
const mutationKey = ['unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete>>, {nodeId: string;documentId: string}> = (props) => {
          const {nodeId,documentId} = props ?? {};

          return  unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete(nodeId,documentId,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UnlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete>>>
    
    export type UnlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Unlink Node Document
 */
export const useUnlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete>>, TError,{nodeId: string;documentId: string}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof unlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDelete>>,
        TError,
        {nodeId: string;documentId: string},
        TContext
      > => {

      const mutationOptions = getUnlinkNodeDocumentApiV1NodesNodeIdDocumentsDocumentIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    