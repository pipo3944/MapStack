/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * MapStack API
 * AI学習プラットフォーム MapStack のバックエンドAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  DocumentCreate,
  DocumentDetailResponse,
  DocumentResponse,
  DocumentRevisionContentResponse,
  DocumentRevisionCreate,
  DocumentRevisionDiff,
  DocumentRevisionResponse,
  DocumentWithRevisionsResponse,
  GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams,
  GetDocumentsApiV1DocumentsGetParams,
  HTTPValidationError,
  PaginatedDocumentResponse
} from '../../model';

import { customInstance } from '../../mutator/custom-instance';




/**
 * ドキュメント一覧を取得する
 * @summary Get Documents
 */
export const getDocumentsApiV1DocumentsGet = (
    params?: GetDocumentsApiV1DocumentsGetParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PaginatedDocumentResponse>(
      {url: `/api/v1/documents/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDocumentsApiV1DocumentsGetQueryKey = (params?: GetDocumentsApiV1DocumentsGetParams,) => {
    return [`/api/v1/documents/`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDocumentsApiV1DocumentsGetQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError = HTTPValidationError>(params?: GetDocumentsApiV1DocumentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentsApiV1DocumentsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>> = ({ signal }) => getDocumentsApiV1DocumentsGet(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentsApiV1DocumentsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>>
export type GetDocumentsApiV1DocumentsGetQueryError = HTTPValidationError


export function useGetDocumentsApiV1DocumentsGet<TData = Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError = HTTPValidationError>(
 params: undefined |  GetDocumentsApiV1DocumentsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentsApiV1DocumentsGet<TData = Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError = HTTPValidationError>(
 params?: GetDocumentsApiV1DocumentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentsApiV1DocumentsGet<TData = Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError = HTTPValidationError>(
 params?: GetDocumentsApiV1DocumentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Documents
 */

export function useGetDocumentsApiV1DocumentsGet<TData = Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError = HTTPValidationError>(
 params?: GetDocumentsApiV1DocumentsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentsApiV1DocumentsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentsApiV1DocumentsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 新規ドキュメントを作成する
 * @summary Create Document
 */
export const createDocumentApiV1DocumentsPost = (
    documentCreate: DocumentCreate,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DocumentResponse>(
      {url: `/api/v1/documents/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: documentCreate, signal
    },
      );
    }
  


export const getCreateDocumentApiV1DocumentsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDocumentApiV1DocumentsPost>>, TError,{data: DocumentCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof createDocumentApiV1DocumentsPost>>, TError,{data: DocumentCreate}, TContext> => {
    
const mutationKey = ['createDocumentApiV1DocumentsPost'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createDocumentApiV1DocumentsPost>>, {data: DocumentCreate}> = (props) => {
          const {data} = props ?? {};

          return  createDocumentApiV1DocumentsPost(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateDocumentApiV1DocumentsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createDocumentApiV1DocumentsPost>>>
    export type CreateDocumentApiV1DocumentsPostMutationBody = DocumentCreate
    export type CreateDocumentApiV1DocumentsPostMutationError = HTTPValidationError

    /**
 * @summary Create Document
 */
export const useCreateDocumentApiV1DocumentsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createDocumentApiV1DocumentsPost>>, TError,{data: DocumentCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createDocumentApiV1DocumentsPost>>,
        TError,
        {data: DocumentCreate},
        TContext
      > => {

      const mutationOptions = getCreateDocumentApiV1DocumentsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 指定されたIDのドキュメント詳細を取得する
 * @summary Get Document
 */
export const getDocumentApiV1DocumentsDocumentIdGet = (
    documentId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DocumentDetailResponse>(
      {url: `/api/v1/documents/${documentId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetDocumentApiV1DocumentsDocumentIdGetQueryKey = (documentId: string,) => {
    return [`/api/v1/documents/${documentId}`] as const;
    }

    
export const getGetDocumentApiV1DocumentsDocumentIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError = HTTPValidationError>(documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentApiV1DocumentsDocumentIdGetQueryKey(documentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>> = ({ signal }) => getDocumentApiV1DocumentsDocumentIdGet(documentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(documentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentApiV1DocumentsDocumentIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>>
export type GetDocumentApiV1DocumentsDocumentIdGetQueryError = HTTPValidationError


export function useGetDocumentApiV1DocumentsDocumentIdGet<TData = Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError = HTTPValidationError>(
 documentId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentApiV1DocumentsDocumentIdGet<TData = Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentApiV1DocumentsDocumentIdGet<TData = Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Document
 */

export function useGetDocumentApiV1DocumentsDocumentIdGet<TData = Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentApiV1DocumentsDocumentIdGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentApiV1DocumentsDocumentIdGetQueryOptions(documentId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ドキュメントを更新して新しいリビジョンを作成する
 * @summary Update Document
 */
export const updateDocumentApiV1DocumentsDocumentIdPut = (
    documentId: string,
    documentRevisionCreate: DocumentRevisionCreate,
 ) => {
      
      
      return customInstance<DocumentRevisionResponse>(
      {url: `/api/v1/documents/${documentId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: documentRevisionCreate
    },
      );
    }
  


export const getUpdateDocumentApiV1DocumentsDocumentIdPutMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDocumentApiV1DocumentsDocumentIdPut>>, TError,{documentId: string;data: DocumentRevisionCreate}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof updateDocumentApiV1DocumentsDocumentIdPut>>, TError,{documentId: string;data: DocumentRevisionCreate}, TContext> => {
    
const mutationKey = ['updateDocumentApiV1DocumentsDocumentIdPut'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateDocumentApiV1DocumentsDocumentIdPut>>, {documentId: string;data: DocumentRevisionCreate}> = (props) => {
          const {documentId,data} = props ?? {};

          return  updateDocumentApiV1DocumentsDocumentIdPut(documentId,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateDocumentApiV1DocumentsDocumentIdPutMutationResult = NonNullable<Awaited<ReturnType<typeof updateDocumentApiV1DocumentsDocumentIdPut>>>
    export type UpdateDocumentApiV1DocumentsDocumentIdPutMutationBody = DocumentRevisionCreate
    export type UpdateDocumentApiV1DocumentsDocumentIdPutMutationError = HTTPValidationError

    /**
 * @summary Update Document
 */
export const useUpdateDocumentApiV1DocumentsDocumentIdPut = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateDocumentApiV1DocumentsDocumentIdPut>>, TError,{documentId: string;data: DocumentRevisionCreate}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateDocumentApiV1DocumentsDocumentIdPut>>,
        TError,
        {documentId: string;data: DocumentRevisionCreate},
        TContext
      > => {

      const mutationOptions = getUpdateDocumentApiV1DocumentsDocumentIdPutMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 指定されたドキュメントの最新コンテンツを取得する
 * @summary Get Document Content
 */
export const getDocumentContentApiV1DocumentsDocumentIdContentGet = (
    documentId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DocumentRevisionContentResponse>(
      {url: `/api/v1/documents/${documentId}/content`, method: 'GET', signal
    },
      );
    }
  

export const getGetDocumentContentApiV1DocumentsDocumentIdContentGetQueryKey = (documentId: string,) => {
    return [`/api/v1/documents/${documentId}/content`] as const;
    }

    
export const getGetDocumentContentApiV1DocumentsDocumentIdContentGetQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError = HTTPValidationError>(documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentContentApiV1DocumentsDocumentIdContentGetQueryKey(documentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>> = ({ signal }) => getDocumentContentApiV1DocumentsDocumentIdContentGet(documentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(documentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentContentApiV1DocumentsDocumentIdContentGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>>
export type GetDocumentContentApiV1DocumentsDocumentIdContentGetQueryError = HTTPValidationError


export function useGetDocumentContentApiV1DocumentsDocumentIdContentGet<TData = Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError = HTTPValidationError>(
 documentId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentContentApiV1DocumentsDocumentIdContentGet<TData = Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentContentApiV1DocumentsDocumentIdContentGet<TData = Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Document Content
 */

export function useGetDocumentContentApiV1DocumentsDocumentIdContentGet<TData = Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentContentApiV1DocumentsDocumentIdContentGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentContentApiV1DocumentsDocumentIdContentGetQueryOptions(documentId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 指定されたドキュメントの特定バージョンのコンテンツを取得する
 * @summary Get Document Version Content
 */
export const getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet = (
    documentId: string,
    version: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DocumentRevisionContentResponse>(
      {url: `/api/v1/documents/${documentId}/content/version/${version}`, method: 'GET', signal
    },
      );
    }
  

export const getGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGetQueryKey = (documentId: string,
    version: string,) => {
    return [`/api/v1/documents/${documentId}/content/version/${version}`] as const;
    }

    
export const getGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGetQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError = HTTPValidationError>(documentId: string,
    version: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGetQueryKey(documentId,version);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>> = ({ signal }) => getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet(documentId,version, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(documentId && version), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>>
export type GetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGetQueryError = HTTPValidationError


export function useGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet<TData = Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError = HTTPValidationError>(
 documentId: string,
    version: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet<TData = Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError = HTTPValidationError>(
 documentId: string,
    version: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet<TData = Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError = HTTPValidationError>(
 documentId: string,
    version: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Document Version Content
 */

export function useGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet<TData = Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError = HTTPValidationError>(
 documentId: string,
    version: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentVersionContentApiV1DocumentsDocumentIdContentVersionVersionGetQueryOptions(documentId,version,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 指定されたドキュメントのバージョン履歴を取得する
 * @summary Get Document Revisions
 */
export const getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet = (
    documentId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DocumentWithRevisionsResponse>(
      {url: `/api/v1/documents/${documentId}/revisions`, method: 'GET', signal
    },
      );
    }
  

export const getGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGetQueryKey = (documentId: string,) => {
    return [`/api/v1/documents/${documentId}/revisions`] as const;
    }

    
export const getGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGetQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError = HTTPValidationError>(documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGetQueryKey(documentId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>> = ({ signal }) => getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet(documentId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(documentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>>
export type GetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGetQueryError = HTTPValidationError


export function useGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet<TData = Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError = HTTPValidationError>(
 documentId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet<TData = Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet<TData = Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Document Revisions
 */

export function useGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet<TData = Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError = HTTPValidationError>(
 documentId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentRevisionsApiV1DocumentsDocumentIdRevisionsGetQueryOptions(documentId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 指定されたドキュメントの2つのバージョン間の差分を取得する
 * @summary Get Document Diff
 */
export const getDocumentDiffApiV1DocumentsDocumentIdDiffGet = (
    documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<DocumentRevisionDiff>(
      {url: `/api/v1/documents/${documentId}/diff`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetDocumentDiffApiV1DocumentsDocumentIdDiffGetQueryKey = (documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams,) => {
    return [`/api/v1/documents/${documentId}/diff`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDocumentDiffApiV1DocumentsDocumentIdDiffGetQueryOptions = <TData = Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError = HTTPValidationError>(documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDocumentDiffApiV1DocumentsDocumentIdDiffGetQueryKey(documentId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>> = ({ signal }) => getDocumentDiffApiV1DocumentsDocumentIdDiffGet(documentId,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(documentId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetDocumentDiffApiV1DocumentsDocumentIdDiffGetQueryResult = NonNullable<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>>
export type GetDocumentDiffApiV1DocumentsDocumentIdDiffGetQueryError = HTTPValidationError


export function useGetDocumentDiffApiV1DocumentsDocumentIdDiffGet<TData = Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError = HTTPValidationError>(
 documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentDiffApiV1DocumentsDocumentIdDiffGet<TData = Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError = HTTPValidationError>(
 documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>,
          TError,
          Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetDocumentDiffApiV1DocumentsDocumentIdDiffGet<TData = Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError = HTTPValidationError>(
 documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Document Diff
 */

export function useGetDocumentDiffApiV1DocumentsDocumentIdDiffGet<TData = Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError = HTTPValidationError>(
 documentId: string,
    params: GetDocumentDiffApiV1DocumentsDocumentIdDiffGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getDocumentDiffApiV1DocumentsDocumentIdDiffGet>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetDocumentDiffApiV1DocumentsDocumentIdDiffGetQueryOptions(documentId,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



